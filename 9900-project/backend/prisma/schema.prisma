generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      UserRole @default(CUSTOMER)
  name      String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  cartItems Cart[]
  orders    Order[]
  reviews   Review[]
  stores    Store[]
}

model Store {
  id          String    @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  rating      Float?    @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ownerId     String
  products    Product[]
  reviews     Review[]
  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
}

model Product {
  id          String          @id @default(uuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  quantity    Int             @default(0)
  category    ProductCategory @default(VEGGIE)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  storeId     String
  cartItems   Cart[]
  orderItems  OrderItem[]
  store       Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId])
  @@index([category])
}

model Order {
  id          String      @id @default(uuid())
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  customerId  String
  customer    User        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items       OrderItem[]

  @@index([customerId])
  @@index([status])
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  orderId   String
  productId String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  storeId   String
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([storeId])
}

model Cart {
  id         String   @id @default(uuid())
  customerId String
  productId  String
  quantity   Int      @default(1)
  createdAt  DateTime @default(now())
  customer   User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum UserRole {
  CUSTOMER
  FARMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PREPARED
  DELIVERED
  COMPLETED
  CANCELLED
}

enum ProductCategory {
  WHEAT
  SUGAR_CANE
  LENTILS
  FRUIT
  VEGGIE
}
