// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户角色枚举
enum UserRole {
  CUSTOMER
  FARMER
  ADMIN
}

// 订单状态枚举
enum OrderStatus {
  PENDING
  PREPARED
  DELIVERED
  COMPLETED
  CANCELLED
}

// 用户模型 - 扩展原有模型
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      UserRole @default(CUSTOMER)
  name      String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  //updatedAt DateTime @updatedAt
  updatedAt DateTime @default(now())

  // 关系
  stores    Store[]      // 农民的店铺
  orders    Order[]      // 顾客的订单
  reviews   Review[]     // 用户的评价
  cartItems Cart[]   // ➜ 反向关系：一个用户可以有多个购物车项
}

// 店铺模型
model Store {
  id          String   @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  rating      Float?   @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关系
  ownerId     String   // 店铺所有者（农民）
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  products    Product[] // 店铺产品
  reviews     Review[]  // 店铺评价

  @@index([ownerId])
}

// 产品类别枚举 - 根据客户需求修改
enum ProductCategory {
  WHEAT     // 小麦
  SUGAR_CANE // 甘蔗
  LENTILS   // 扁豆
  FRUIT     // 水果
  VEGGIE    // 蔬菜
}

// 产品模型
model Product {
  id          String          @id @default(uuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  quantity    Int             @default(0)
  category    ProductCategory @default(VEGGIE)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // 关系
  storeId     String          // 所属店铺
  store       Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]     // 订单项目
  cartItems Cart[]   // ➜ 反向关系：一个商品可以出现在多个购物车中

  @@index([storeId])
  @@index([category])
}

// 订单模型
model Order {
  id          String      @id @default(uuid())
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // 关系
  customerId  String      // 顾客
  customer    User        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items       OrderItem[] // 订单项目

  @@index([customerId])
  @@index([status])
}

// 订单项目模型
model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  price     Float    // 下单时的价格
  createdAt DateTime @default(now())

  // 关系
  orderId   String   // 所属订单
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String   // 产品
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
}

// 评价模型
model Review {
  id        String   @id @default(uuid())
  rating    Int      // 1-5星评价
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  userId    String   // 评价者
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeId   String   // 被评价的店铺
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([storeId])
}

model Cart {
  id         String   @id @default(uuid())  // 购物车 ID
  customer   User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String

  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String

  quantity   Int      @default(1)
  createdAt  DateTime @default(now())
}
